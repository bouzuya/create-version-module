module Test.Formatters
  ( tests
  ) where

import Prelude

import Data.Newtype as Newtype
import Data.String as String
import Formatters as Formatters
import Language as Language
import Test.Unit (TestSuite)
import Test.Unit as TestUnit
import Test.Unit.Assert as Assert

tests :: TestSuite
tests = TestUnit.suite "Formatters" do
  let v010 = Newtype.wrap "0.1.0"
  TestUnit.test "format (JavaScript)" do
    Assert.equal
      (String.joinWith
        "\n"
        [ "// Generated by @bouzuya/create-version-module"
        , "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format Language.JavaScript false v010)

    Assert.equal
      (String.joinWith
        "\n"
        [ "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format Language.JavaScript true v010)

  TestUnit.test "format (TypeScript)" do
    Assert.equal
      (String.joinWith
        "\n"
        [ "// Generated by @bouzuya/create-version-module"
        , "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format Language.TypeScript false v010)

    Assert.equal
      (String.joinWith
        "\n"
        [ "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format Language.TypeScript true v010)

  TestUnit.test "format (PureScript)" do
    Assert.equal
      (String.joinWith
        "\n"
        [ "-- Generated by @bouzuya/create-version-module"
        , "module Version"
        , "  ( version"
        , "  ) where"
        , ""
        , "version :: String"
        , "version = \"0.1.0\""
        , ""
        ])
      (Formatters.format Language.PureScript false v010)

    Assert.equal
      (String.joinWith
        "\n"
        [ "module Version"
        , "  ( version"
        , "  ) where"
        , ""
        , "version :: String"
        , "version = \"0.1.0\""
        , ""
        ])
      (Formatters.format Language.PureScript true v010)
