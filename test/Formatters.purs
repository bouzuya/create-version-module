module Test.Formatters
  ( tests
  ) where

import Prelude

import Data.Array as Array
import Data.Newtype as Newtype
import Formatters as Formatters
import Test.Unit (TestSuite)
import Test.Unit as TestUnit
import Test.Unit.Assert as Assert

tests :: TestSuite
tests = TestUnit.suite "Formatters" do
  let v010 = Newtype.wrap "0.1.0"
  TestUnit.test "format (JavaScript)" do
    Assert.equal
      (Array.intercalate
        "\n"
        [ "// Generated by @bouzuya/create-version-module"
        , "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format false "JavaScript" v010)

    Assert.equal
      (Array.intercalate
        "\n"
        [ "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format true "JavaScript" v010)

  TestUnit.test "format (TypeScript)" do
    Assert.equal
      (Array.intercalate
        "\n"
        [ "// Generated by @bouzuya/create-version-module"
        , "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format false "TypeScript" v010)

    Assert.equal
      (Array.intercalate
        "\n"
        [ "const version = '0.1.0';"
        , "export { version };"
        , ""
        ])
      (Formatters.format true "TypeScript" v010)

  TestUnit.test "format (PureScript)" do
    Assert.equal
      (Array.intercalate
        "\n"
        [ "-- Generated by @bouzuya/create-version-module"
        , "module Version"
        , "  ( version"
        , "  ) where"
        , ""
        , "version :: String"
        , "version = \"0.1.0\""
        , ""
        ])
      (Formatters.format false "PureScript" v010)

    Assert.equal
      (Array.intercalate
        "\n"
        [ "module Version"
        , "  ( version"
        , "  ) where"
        , ""
        , "version :: String"
        , "version = \"0.1.0\""
        , ""
        ])
      (Formatters.format true "PureScript" v010)
